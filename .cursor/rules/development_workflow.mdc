# Development Workflow

This rule documents the development workflow and processes for Brottsplatskartan.

## Local Development

### Setup
1. Clone the repository
2. Copy `.env.example` to `.env` and configure environment variables
3. Install PHP dependencies: `composer install`
4. Install JavaScript dependencies: `npm install`
5. Generate application key: `php artisan key:generate`
6. Run database migrations: `php artisan migrate`

### Running the Application
- Start the Laravel development server: `./artisan serve`
- Compile assets in development mode: `npm run dev`
- Watch for asset changes: `npm run watch`

## Deployment

The project uses GitHub Actions for continuous deployment:
- Configured in `.github/workflows/`
- Automatically deploys to production on merges to the main branch
- Badge in README shows deployment status: ![Deploy till live](https://github.com/bonny/brottsplatskartan-web/workflows/Deploy%20to%20live/badge.svg)

## Package Management

### PHP Dependencies
- Managed with Composer
- Update packages: `composer update <package-name> --ignore-platform-req=ext-redis`
- Key dependencies listed in `composer.json`

### JavaScript Dependencies
- Managed with npm
- Update packages: `npm update`
- Key dependencies listed in `package.json`

## Testing and Quality Assurance

The project likely uses:
- PHPUnit for PHP testing
- Laravel's built-in testing tools
- PHPStan for static analysis (configured in `phpstan.neon`)

## Database

### Migrations
- Located in `database/migrations/`
- Run migrations: `php artisan migrate`
- Create new migrations: `php artisan make:migration`

### Seeding
- Database seeders in `database/seeders/`
- Run seeders: `php artisan db:seed`

## Caching

The application uses Redis for caching:
- Required as a PHP extension
- Configured in `.env`
- Used for performance optimization

## Debugging

Tools available for debugging:
- Laravel Debugbar
- Laravel's built-in error handling
- Log viewer: `rap2hpoutre/laravel-log-viewer` 